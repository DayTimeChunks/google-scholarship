{"ast":null,"code":"import _classCallCheck from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js\";\n\n/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\nvar ContactBody =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactBody, _Component);\n\n  function ContactBody(props) {\n    var _this;\n\n    _classCallCheck(this, ContactBody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContactBody).call(this, props));\n\n    _this.populateInfoWindow = function (marker, infoWindow) {};\n\n    _this.state = {\n      mapIsReady: false\n    };\n    return _this;\n  }\n\n  _createClass(ContactBody, [{\n    key: \"getGoogleMaps\",\n    value: function getGoogleMaps() {\n      // If we haven't already defined the promise, define it\n      if (!this.googleMapsPromise) {\n        this.googleMapsPromise = new Promise(function (resolve) {\n          // Add a global handler for when the API finishes loading\n          window.resolveGoogleMapsPromise = function () {\n            // Resolve the promise\n            resolve(google); // Tidy up\n\n            delete window.resolveGoogleMapsPromise;\n          }; // Load the Google Maps API\n\n\n          var script = document.createElement(\"script\");\n          var API = 'AIzaSyB8uwCpGazZQ4JvdwNQP9Jt0GH0FukWd-M';\n          script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(API, \"&callback=resolveGoogleMapsPromise\");\n          script.async = true;\n          document.body.appendChild(script);\n        });\n      } // Return a promise for the Google Maps API\n\n\n      return this.googleMapsPromise;\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      // Start Google Maps API loading since we know we'll soon need it\n      this.getGoogleMaps();\n      console.log(\"tapas 1\", this.props.tapas);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Once the Google Maps API has finished loading, initialize the map\n      // NOTE: Moved content to componentDidUpdate() because props was still empty.\n      console.log(\"tapas 2\", this.props.tapas);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      console.log(\"tapas 3\", this.props.tapas);\n      var tapas = this.props.tapas;\n      var markers; // Once the Google Maps API has finished loading,\n      // AND props loaded -> initialize the map\n\n      this.getGoogleMaps().then(function (google) {\n        var center = {\n          lat: 50.121870,\n          lng: 8.689550\n        };\n        var map = new google.maps.Map(document.getElementById('map'), {\n          zoom: 13,\n          center: center\n        });\n        var largeInfoWindow = new google.maps.InfoWindow();\n        markers = tapas.map(function (tapa) {\n          var marker = new google.maps.Marker({\n            map: map,\n            position: {\n              lat: tapa.venue.location.lat,\n              lng: tapa.venue.location.lngt\n            },\n            title: tapa.venue.name,\n            animation: google.maps.Animation.DROP,\n            id: tapa.venue.id\n          });\n          marker.addListener('click', function () {\n            populateInfoWindow(_this2, largeInfoWindow);\n          });\n          return marker;\n        }); // const infoWindow = new google.maps.InfoWindow({\n        //   content: \"Test text\"\n        // });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Contact\"), React.createElement(\"div\", {\n        id: \"map\",\n        style: {\n          width: 400,\n          height: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ContactBody;\n}(Component);\n\nContactBody.propTypes = {\n  tapas: PropTypes.array\n};\nexport default ContactBody;","map":{"version":3,"sources":["/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js"],"names":["React","Component","PropTypes","ContactBody","props","populateInfoWindow","marker","infoWindow","state","mapIsReady","googleMapsPromise","Promise","resolve","window","resolveGoogleMapsPromise","google","script","document","createElement","API","src","async","body","appendChild","getGoogleMaps","console","log","tapas","markers","then","center","lat","lng","map","maps","Map","getElementById","zoom","largeInfoWindow","InfoWindow","tapa","Marker","position","venue","location","lngt","title","name","animation","Animation","DROP","id","addListener","width","height","propTypes","array"],"mappings":"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","sourcesContent":["/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\nclass ContactBody extends Component {\n\n  static propTypes = {\n    tapas: PropTypes.array,\n  };\n\n  constructor(props){\n    super(props)\n    this.state = {\n      mapIsReady: false,\n    };\n  }\n\n  getGoogleMaps() {\n    // If we haven't already defined the promise, define it\n    if (!this.googleMapsPromise) {\n      this.googleMapsPromise = new Promise((resolve) => {\n        // Add a global handler for when the API finishes loading\n        window.resolveGoogleMapsPromise = () => {\n          // Resolve the promise\n          resolve(google);\n\n          // Tidy up\n          delete window.resolveGoogleMapsPromise;\n        };\n\n        // Load the Google Maps API\n        const script = document.createElement(\"script\");\n        const API = 'AIzaSyB8uwCpGazZQ4JvdwNQP9Jt0GH0FukWd-M';\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\n        script.async = true;\n        document.body.appendChild(script);\n      });\n    }\n\n    // Return a promise for the Google Maps API\n    return this.googleMapsPromise;\n  }\n\n  populateInfoWindow = (marker, infoWindow) => {\n    \n  };\n\n  componentWillMount() {\n    // Start Google Maps API loading since we know we'll soon need it\n    this.getGoogleMaps();\n    console.log(\"tapas 1\", this.props.tapas);\n  }\n\n  componentDidMount() {\n    // Once the Google Maps API has finished loading, initialize the map\n    // NOTE: Moved content to componentDidUpdate() because props was still empty.\n    console.log(\"tapas 2\", this.props.tapas);\n  }\n\n  componentDidUpdate(){\n    console.log(\"tapas 3\", this.props.tapas);\n\n    const {tapas} = this.props;\n    let markers;\n\n    // Once the Google Maps API has finished loading,\n    // AND props loaded -> initialize the map\n    this.getGoogleMaps().then((google) => {\n\n      const center = {lat: 50.121870, lng: 8.689550};\n      const map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 13,\n        center: center\n      });\n\n      let largeInfoWindow = new google.maps.InfoWindow();\n\n      markers = tapas.map(tapa => {\n        let marker = new google.maps.Marker({\n          map: map,\n          position: {lat: tapa.venue.location.lat, lng: tapa.venue.location.lngt},\n          title: tapa.venue.name,\n          animation: google.maps.Animation.DROP,\n          id: tapa.venue.id\n        });\n        marker.addListener('click', () => {\n          populateInfoWindow(this, largeInfoWindow);\n        });\n        return marker;\n      });\n\n      // const infoWindow = new google.maps.InfoWindow({\n      //   content: \"Test text\"\n      // });\n\n\n\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Contact</h1>\n        <div id=\"map\" style={{width: 400, height: 300}}></div>\n      </div>\n    )\n  }\n}\n\nexport default ContactBody;"]},"metadata":{},"sourceType":"module"}