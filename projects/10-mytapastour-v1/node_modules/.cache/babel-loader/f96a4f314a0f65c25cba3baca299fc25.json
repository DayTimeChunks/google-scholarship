{"ast":null,"code":"import _classCallCheck from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js\";\n\n/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\"; // Sources:\n// https://stackoverflow.com/questions/48493960/using-google-map-in-react-component  (best)\n// https://stackoverflow.com/questions/45429484/how-to-implement-google-maps-js-api-in-react-without-an-external-library\n// https://jsbin.com/tejutihoka/edit?js,output\n\nvar MapPromise =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapPromise, _Component);\n\n  function MapPromise(props) {\n    var _this;\n\n    _classCallCheck(this, MapPromise);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapPromise).call(this, props));\n\n    _this.populateInfoWindow = function (marker, infoWindow, map) {\n      infoWindow.marker = marker;\n      infoWindow.setContent(\"<div>\".concat(marker.title, \"</div>\"));\n      infoWindow.open(map, marker); // Check that only one element on the venue list is highlighted\n\n      var selections = document.getElementsByClassName(\"highlight\");\n\n      if (selections && selections.length > 0) {\n        Array.prototype.map.call(selections, function (el) {\n          return el.classList.remove(\"highlight\");\n        });\n      }\n\n      document.getElementById(marker.id).classList.add(\"highlight\");\n      infoWindow.addListener('closeclick', function () {\n        infoWindow.marker = null;\n\n        _this.props.handleInfoClose(marker.id);\n\n        document.getElementById(marker.id).classList.remove(\"highlight\");\n      });\n    };\n\n    _this.state = {\n      mapIsReady: false,\n      map: \"\",\n      markers: \"\",\n      infoWindow: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(MapPromise, [{\n    key: \"getGoogleMaps\",\n    value: function getGoogleMaps() {\n      // If we haven't already defined the promise, define it\n      if (!this.googleMapsPromise) {\n        this.googleMapsPromise = new Promise(function (resolve) {\n          // Add a global handler for when the API finishes loading\n          window.resolveGoogleMapsPromise = function () {\n            // Resolve the promise\n            resolve(google); // Tidy up\n\n            delete window.resolveGoogleMapsPromise;\n          }; // Load the Google Maps API\n\n\n          var script = document.createElement(\"script\");\n          var API = 'AIzaSyCEhfBMzJxAaTKLtp8GjcVwEZobHckXXis';\n          script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(API, \"&callback=resolveGoogleMapsPromise\");\n          script.async = true;\n          document.body.appendChild(script);\n        });\n      } // Return a promise for the Google Maps API\n\n\n      return this.googleMapsPromise;\n    } // Method used on each marker upon creation or if list item is checked\n\n  }, {\n    key: \"addMapMarkers\",\n    value: function addMapMarkers() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          tapas = _this$props.tapas,\n          checkedId = _this$props.checkedId,\n          recommend = _this$props.recommend;\n      var _this$state = this.state,\n          map = _this$state.map,\n          infoWindow = _this$state.infoWindow;\n      var bounds = new google.maps.LatLngBounds();\n      var markers = tapas.map(function (tapa) {\n        var venue;\n\n        if (recommend) {\n          venue = tapa.venue;\n        } else {\n          venue = tapa;\n        }\n\n        var marker = new google.maps.Marker({\n          map: map,\n          position: {\n            lat: venue.location.lat,\n            lng: venue.location.lng\n          },\n          title: venue.name,\n          // animation: google.maps.Animation.DROP,\n          id: venue.id\n        });\n        marker.addListener('click', function () {\n          if (infoWindow.marker != marker) {\n            _this2.populateInfoWindow(marker, infoWindow, map);\n          }\n        });\n        bounds.extend(marker.position);\n        return marker;\n      }); // markers.map(marker => {marker.setMap(null)})\n\n      return markers;\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      console.log(\"Will mount\"); // Start Google Maps API loading since we know we'll soon need it\n      // this.getGoogleMaps();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      console.log(\"Map Did Mount\"); // Once the Google Maps API has finished loading, initialize the map\n      // NOTE: Moved content to componentDidUpdate() because props was still empty at this point.\n\n      this.getGoogleMaps().then(function (google) {\n        var center = {\n          lat: 50.121870,\n          lng: 8.689550\n        };\n        var map = new google.maps.Map(document.getElementById('map'), {\n          zoom: 13,\n          center: center,\n          mapTypeControl: false\n        });\n        var largeInfoWindow = new google.maps.InfoWindow();\n        console.log(\"infowindow Mount:\", largeInfoWindow);\n        return {\n          map: map,\n          window: largeInfoWindow\n        };\n      }).then(function (obj) {\n        _this3.setState({\n          map: obj.map,\n          infoWindow: obj.window\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$props2 = this.props,\n          tapas = _this$props2.tapas,\n          checkedId = _this$props2.checkedId,\n          recommend = _this$props2.recommend;\n      var _this$state2 = this.state,\n          map = _this$state2.map,\n          infoWindow = _this$state2.infoWindow; // Closes info window when list item gets clicked (on un-check)\n\n      if (infoWindow.marker) {\n        infoWindow.close();\n      }\n\n      var markers = this.addMapMarkers(); // Populates marker when list item gets clicked (on-check)\n\n      for (var i = 0; i < markers.length; i++) {\n        if (markers[i].id === checkedId) {\n          this.populateInfoWindow(markers[i], infoWindow, map);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log(\"unmounted\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"map\",\n        style: {\n          width: 400,\n          height: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MapPromise;\n}(Component);\n\nMapPromise.propTypes = {\n  recommend: PropTypes.bool,\n  tapas: PropTypes.array,\n  checkedId: PropTypes.string,\n  handleInfoClose: PropTypes.func\n};\nexport default MapPromise;","map":{"version":3,"sources":["/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js"],"names":["React","Component","PropTypes","MapPromise","props","populateInfoWindow","marker","infoWindow","map","setContent","title","open","selections","document","getElementsByClassName","length","Array","prototype","call","el","classList","remove","getElementById","id","add","addListener","handleInfoClose","state","mapIsReady","markers","googleMapsPromise","Promise","resolve","window","resolveGoogleMapsPromise","google","script","createElement","API","src","async","body","appendChild","tapas","checkedId","recommend","bounds","maps","LatLngBounds","tapa","venue","Marker","position","lat","location","lng","name","extend","console","log","getGoogleMaps","then","center","Map","zoom","mapTypeControl","largeInfoWindow","InfoWindow","obj","setState","close","addMapMarkers","i","width","height","propTypes","bool","array","string","func"],"mappings":";;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;AACA;;IAEMC,U;;;;;AASJ,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,oFAAMA,KAAN;;AADgB,UAoClBC,kBApCkB,GAoCG,UAACC,MAAD,EAASC,UAAT,EAAqBC,GAArB,EAA6B;AAChDD,MAAAA,UAAU,CAACD,MAAX,GAAoBA,MAApB;AACAC,MAAAA,UAAU,CAACE,UAAX,gBAA8BH,MAAM,CAACI,KAArC;AACAH,MAAAA,UAAU,CAACI,IAAX,CAAgBH,GAAhB,EAAqBF,MAArB,EAHgD,CAKhD;;AACA,UAAIM,UAAU,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAjB;;AACA,UAAIF,UAAU,IAAIA,UAAU,CAACG,MAAX,GAAoB,CAAtC,EAAyC;AACvCC,QAAAA,KAAK,CAACC,SAAN,CAAgBT,GAAhB,CAAoBU,IAApB,CAAyBN,UAAzB,EAAqC,UAAAO,EAAE;AAAA,iBAAIA,EAAE,CAACC,SAAH,CAAaC,MAAb,CAAoB,WAApB,CAAJ;AAAA,SAAvC;AACD;;AACDR,MAAAA,QAAQ,CAACS,cAAT,CAAwBhB,MAAM,CAACiB,EAA/B,EAAmCH,SAAnC,CAA6CI,GAA7C,CAAiD,WAAjD;AAEAjB,MAAAA,UAAU,CAACkB,WAAX,CAAuB,YAAvB,EAAqC,YAAI;AACvClB,QAAAA,UAAU,CAACD,MAAX,GAAoB,IAApB;;AACA,cAAKF,KAAL,CAAWsB,eAAX,CAA2BpB,MAAM,CAACiB,EAAlC;;AACAV,QAAAA,QAAQ,CAACS,cAAT,CAAwBhB,MAAM,CAACiB,EAA/B,EAAmCH,SAAnC,CAA6CC,MAA7C,CAAoD,WAApD;AAED,OALD;AAOD,KAvDiB;;AAEhB,UAAKM,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,KADD;AAEXpB,MAAAA,GAAG,EAAE,EAFM;AAGXqB,MAAAA,OAAO,EAAE,EAHE;AAIXtB,MAAAA,UAAU,EAAE;AAJD,KAAb;AAFgB;AAQjB;;;;oCAEe;AACd;AACA,UAAI,CAAC,KAAKuB,iBAAV,EAA6B;AAC3B,aAAKA,iBAAL,GAAyB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAChD;AACAC,UAAAA,MAAM,CAACC,wBAAP,GAAkC,YAAM;AACtC;AACAF,YAAAA,OAAO,CAACG,MAAD,CAAP,CAFsC,CAItC;;AACA,mBAAOF,MAAM,CAACC,wBAAd;AACD,WAND,CAFgD,CAUhD;;;AACA,cAAME,MAAM,GAAGvB,QAAQ,CAACwB,aAAT,CAAuB,QAAvB,CAAf;AACA,cAAMC,GAAG,GAAG,yCAAZ;AACAF,UAAAA,MAAM,CAACG,GAAP,yDAA4DD,GAA5D;AACAF,UAAAA,MAAM,CAACI,KAAP,GAAe,IAAf;AACA3B,UAAAA,QAAQ,CAAC4B,IAAT,CAAcC,WAAd,CAA0BN,MAA1B;AACD,SAhBwB,CAAzB;AAiBD,OApBa,CAqBd;;;AACA,aAAO,KAAKN,iBAAZ;AACD,K,CAED;;;;oCAsBgB;AAAA;;AAAA,wBACwB,KAAK1B,KAD7B;AAAA,UACPuC,KADO,eACPA,KADO;AAAA,UACAC,SADA,eACAA,SADA;AAAA,UACWC,SADX,eACWA,SADX;AAAA,wBAEY,KAAKlB,KAFjB;AAAA,UAEPnB,GAFO,eAEPA,GAFO;AAAA,UAEFD,UAFE,eAEFA,UAFE;AAId,UAAIuC,MAAM,GAAG,IAAIX,MAAM,CAACY,IAAP,CAAYC,YAAhB,EAAb;AAEA,UAAInB,OAAO,GAAGc,KAAK,CAACnC,GAAN,CAAU,UAAAyC,IAAI,EAAI;AAC9B,YAAIC,KAAJ;;AACA,YAAIL,SAAJ,EAAc;AACZK,UAAAA,KAAK,GAAGD,IAAI,CAACC,KAAb;AACD,SAFD,MAEO;AACLA,UAAAA,KAAK,GAAGD,IAAR;AACD;;AAED,YAAI3C,MAAM,GAAG,IAAI6B,MAAM,CAACY,IAAP,CAAYI,MAAhB,CAAuB;AAClC3C,UAAAA,GAAG,EAAEA,GAD6B;AAElC4C,UAAAA,QAAQ,EAAE;AAACC,YAAAA,GAAG,EAAEH,KAAK,CAACI,QAAN,CAAeD,GAArB;AAA0BE,YAAAA,GAAG,EAAEL,KAAK,CAACI,QAAN,CAAeC;AAA9C,WAFwB;AAGlC7C,UAAAA,KAAK,EAAEwC,KAAK,CAACM,IAHqB;AAIlC;AACAjC,UAAAA,EAAE,EAAE2B,KAAK,CAAC3B;AALwB,SAAvB,CAAb;AAOAjB,QAAAA,MAAM,CAACmB,WAAP,CAAmB,OAAnB,EAA4B,YAAM;AAChC,cAAIlB,UAAU,CAACD,MAAX,IAAqBA,MAAzB,EAAgC;AAC9B,YAAA,MAAI,CAACD,kBAAL,CAAwBC,MAAxB,EAAgCC,UAAhC,EAA4CC,GAA5C;AACD;AACF,SAJD;AAKAsC,QAAAA,MAAM,CAACW,MAAP,CAAcnD,MAAM,CAAC8C,QAArB;AAEA,eAAO9C,MAAP;AACD,OAvBa,CAAd,CANc,CA+Bd;;AACA,aAAOuB,OAAP;AACD;;;yCAEoB;AACnB6B,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADmB,CAEnB;AACA;AAED;;;wCAEmB;AAAA;;AAClBD,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EADkB,CAElB;AACA;;AACA,WAAKC,aAAL,GAAqBC,IAArB,CAA0B,UAAC1B,MAAD,EAAY;AACpC,YAAM2B,MAAM,GAAG;AAACT,UAAAA,GAAG,EAAE,SAAN;AAAiBE,UAAAA,GAAG,EAAE;AAAtB,SAAf;AACA,YAAM/C,GAAG,GAAG,IAAI2B,MAAM,CAACY,IAAP,CAAYgB,GAAhB,CAAoBlD,QAAQ,CAACS,cAAT,CAAwB,KAAxB,CAApB,EAAoD;AAC9D0C,UAAAA,IAAI,EAAE,EADwD;AAE9DF,UAAAA,MAAM,EAAEA,MAFsD;AAG9DG,UAAAA,cAAc,EAAE;AAH8C,SAApD,CAAZ;AAMA,YAAIC,eAAe,GAAG,IAAI/B,MAAM,CAACY,IAAP,CAAYoB,UAAhB,EAAtB;AAEAT,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAkCO,eAAlC;AAGA,eAAO;AAAC1D,UAAAA,GAAG,EAACA,GAAL;AAAUyB,UAAAA,MAAM,EAAEiC;AAAlB,SAAP;AAED,OAfD,EAeGL,IAfH,CAeQ,UAAAO,GAAG,EAAI;AACb,QAAA,MAAI,CAACC,QAAL,CAAc;AACZ7D,UAAAA,GAAG,EAAE4D,GAAG,CAAC5D,GADG;AAEZD,UAAAA,UAAU,EAAE6D,GAAG,CAACnC;AAFJ,SAAd;AAID,OApBD;AAqBD;;;yCAEmB;AAAA,yBAEoB,KAAK7B,KAFzB;AAAA,UAEXuC,KAFW,gBAEXA,KAFW;AAAA,UAEJC,SAFI,gBAEJA,SAFI;AAAA,UAEOC,SAFP,gBAEOA,SAFP;AAAA,yBAGQ,KAAKlB,KAHb;AAAA,UAGXnB,GAHW,gBAGXA,GAHW;AAAA,UAGND,UAHM,gBAGNA,UAHM,EAKlB;;AACA,UAAIA,UAAU,CAACD,MAAf,EAAsB;AACpBC,QAAAA,UAAU,CAAC+D,KAAX;AACD;;AAED,UAAIzC,OAAO,GAAG,KAAK0C,aAAL,EAAd,CAVkB,CAYlB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3C,OAAO,CAACd,MAA5B,EAAoCyD,CAAC,EAArC,EAAwC;AACtC,YAAI3C,OAAO,CAAC2C,CAAD,CAAP,CAAWjD,EAAX,KAAkBqB,SAAtB,EAAgC;AAC9B,eAAKvC,kBAAL,CAAwBwB,OAAO,CAAC2C,CAAD,CAA/B,EAAoCjE,UAApC,EAAgDC,GAAhD;AACD;AACF;AACF;;;2CAEqB;AACpBkD,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;;;6BAIQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,EAAE,EAAC,KAAR;AAAc,QAAA,KAAK,EAAE;AAACc,UAAAA,KAAK,EAAE,GAAR;AAAaC,UAAAA,MAAM,EAAE;AAArB,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;;;EAvKsBzE,S;;AAAnBE,U,CAEGwE,S,GAAY;AACjB9B,EAAAA,SAAS,EAAE3C,SAAS,CAAC0E,IADJ;AAEjBjC,EAAAA,KAAK,EAAEzC,SAAS,CAAC2E,KAFA;AAGjBjC,EAAAA,SAAS,EAAE1C,SAAS,CAAC4E,MAHJ;AAIjBpD,EAAAA,eAAe,EAAExB,SAAS,CAAC6E;AAJV,C;AAwKrB,eAAe5E,UAAf","sourcesContent":["/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\n// Sources:\n// https://stackoverflow.com/questions/48493960/using-google-map-in-react-component  (best)\n// https://stackoverflow.com/questions/45429484/how-to-implement-google-maps-js-api-in-react-without-an-external-library\n// https://jsbin.com/tejutihoka/edit?js,output\n\nclass MapPromise extends Component {\n\n  static propTypes = {\n    recommend: PropTypes.bool,\n    tapas: PropTypes.array,\n    checkedId: PropTypes.string,\n    handleInfoClose: PropTypes.func\n  };\n\n  constructor(props){\n    super(props);\n    this.state = {\n      mapIsReady: false,\n      map: \"\",\n      markers: \"\",\n      infoWindow: \"\"\n    };\n  }\n\n  getGoogleMaps() {\n    // If we haven't already defined the promise, define it\n    if (!this.googleMapsPromise) {\n      this.googleMapsPromise = new Promise((resolve) => {\n        // Add a global handler for when the API finishes loading\n        window.resolveGoogleMapsPromise = () => {\n          // Resolve the promise\n          resolve(google);\n\n          // Tidy up\n          delete window.resolveGoogleMapsPromise;\n        };\n\n        // Load the Google Maps API\n        const script = document.createElement(\"script\");\n        const API = 'AIzaSyCEhfBMzJxAaTKLtp8GjcVwEZobHckXXis';\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\n        script.async = true;\n        document.body.appendChild(script);\n      });\n    }\n    // Return a promise for the Google Maps API\n    return this.googleMapsPromise;\n  }\n\n  // Method used on each marker upon creation or if list item is checked\n  populateInfoWindow = (marker, infoWindow, map) => {\n    infoWindow.marker = marker;\n    infoWindow.setContent(`<div>${marker.title}</div>`);\n    infoWindow.open(map, marker);\n\n    // Check that only one element on the venue list is highlighted\n    let selections = document.getElementsByClassName(\"highlight\");\n    if (selections && selections.length > 0) {\n      Array.prototype.map.call(selections, el => el.classList.remove(\"highlight\") );\n    }\n    document.getElementById(marker.id).classList.add(\"highlight\");\n\n    infoWindow.addListener('closeclick', ()=>{\n      infoWindow.marker = null;\n      this.props.handleInfoClose(marker.id);\n      document.getElementById(marker.id).classList.remove(\"highlight\");\n\n    });\n\n  };\n\n  addMapMarkers() {\n    const {tapas, checkedId, recommend} = this.props;\n    const {map, infoWindow} = this.state;\n\n    let bounds = new google.maps.LatLngBounds();\n\n    let markers = tapas.map(tapa => {\n      let venue;\n      if (recommend){\n        venue = tapa.venue;\n      } else {\n        venue = tapa;\n      }\n\n      let marker = new google.maps.Marker({\n        map: map,\n        position: {lat: venue.location.lat, lng: venue.location.lng},\n        title: venue.name,\n        // animation: google.maps.Animation.DROP,\n        id: venue.id\n      });\n      marker.addListener('click', () => {\n        if (infoWindow.marker != marker){\n          this.populateInfoWindow(marker, infoWindow, map);\n        }\n      });\n      bounds.extend(marker.position);\n\n      return marker;\n    });\n\n    // markers.map(marker => {marker.setMap(null)})\n    return markers;\n  }\n\n  componentWillMount() {\n    console.log(\"Will mount\")\n    // Start Google Maps API loading since we know we'll soon need it\n    // this.getGoogleMaps();\n\n  }\n\n  componentDidMount() {\n    console.log(\"Map Did Mount\");\n    // Once the Google Maps API has finished loading, initialize the map\n    // NOTE: Moved content to componentDidUpdate() because props was still empty at this point.\n    this.getGoogleMaps().then((google) => {\n      const center = {lat: 50.121870, lng: 8.689550};\n      const map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 13,\n        center: center,\n        mapTypeControl: false\n      });\n\n      let largeInfoWindow = new google.maps.InfoWindow();\n\n      console.log(\"infowindow Mount:\" , largeInfoWindow)\n\n\n      return {map:map, window: largeInfoWindow};\n\n    }).then(obj => {\n      this.setState({\n        map: obj.map,\n        infoWindow: obj.window\n      })\n    })\n  }\n\n  componentDidUpdate(){\n\n    const {tapas, checkedId, recommend} = this.props;\n    const {map, infoWindow} = this.state;\n\n    // Closes info window when list item gets clicked (on un-check)\n    if (infoWindow.marker){\n      infoWindow.close();\n    }\n\n    let markers = this.addMapMarkers();\n\n    // Populates marker when list item gets clicked (on-check)\n    for (let i = 0; i < markers.length; i++){\n      if (markers[i].id === checkedId){\n        this.populateInfoWindow(markers[i], infoWindow, map);\n      }\n    }\n  }\n\n  componentWillUnmount(){\n    console.log(\"unmounted\");\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{width: 400, height: 300}}></div>\n      </div>\n    )\n  }\n}\n\nexport default MapPromise;"]},"metadata":{},"sourceType":"module"}