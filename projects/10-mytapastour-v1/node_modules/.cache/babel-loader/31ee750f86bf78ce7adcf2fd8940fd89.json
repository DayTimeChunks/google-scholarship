{"ast":null,"code":"import escapeRegExp from 'escape-string-regexp';\nimport { secret, id } from './keys'; // Useful documents:\n// https://github.com/foursquare/react-foursquare\n\nvar apiUpToDate = \"20181204\"; // Date I built this app, tells FourSquare to use an api version compatible with this date\n\nvar limitResponses = \"3\"; // Number of responses (I think maximum is 50)\n\nvar coffee = \"&v=20180323&limit=1\";\nvar latlon = \"&ll=40.7243,-74.0018\";\nvar q = \"&query=coffee\";\nvar explore = \"https://api.foursquare.com/v2/venues/explore\";\nvar venuApi = 'https://api.foursquare.com/v2/venues';\nvar apiUrl = \"https://api.foursquare.com/v2\";\nvar apiFeature = \"/venues\"; // 'https://api.foursquare.com/v2/venues/explore?client_id=CLIENT_ID&client_secret=CLIENT_SECRET&v=20180323&limit=1&ll=40.7243,-74.0018&query=coffee'\n// Generate a unique token for storing your bookshelf data on the backend server.\n\nvar token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nvar headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n};\nexport var exploreArea = function exploreArea(location) {\n  var exploreLoc = explore + \"?ll=\" + location.lat.toString() + \",\" + location.lng.toString();\n  console.log(\"explore argument: \", exploreLoc);\n  fetch(exploreLoc).then(function (response) {\n    console.log(response);\n  }).catch(function (err) {\n    console.log(err);\n  });\n}; // export const exploreApi = (loc) => {\n//   return fetch(`${api}client_id=${id}&client_secret=${secret}&v=${apiUpToDate}&limit=${limitResponses}&ll=${loc.lat},${loc.lng}`, {})\n//     .then((res) => res.json())\n//     .catch( (err) => {\n//       console.log(\"Fetch error\", err)\n//     });\n// };\n\nexport var getBest = function getBest(loc) {\n  /*\n  Uses the \"explore?\" Foursquare endpoint,\n  which searches only for recommended places.\n  Use the \"search?\" endpoint instead for a wider search.\n   To access the results array, the structure is:\n  array:  myJson.response.groups[0].items\n  * */\n  var api = \"https://api.foursquare.com/v2/venues/explore?\";\n  var food = \"4d4b7105d754a06374d81259\";\n  var myHeaders = new Headers();\n  var myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default'\n  };\n  myHeaders.append(\"Accept-Language\", \"en\");\n  return fetch(\"\".concat(api, \"client_id=\").concat(id, \"&client_secret=\").concat(secret, \"&v=\").concat(apiUpToDate, \"&limit=\").concat(limitResponses, \"&intent=browse&ll=\").concat(loc.lat, \",\").concat(loc.lng, \"&categoryId=\").concat(food), myInit).then(function (res) {\n    return res.json();\n  }).catch(function (err) {\n    console.log(\"getBest error, \", err);\n  });\n};\nexport var getSearch = function getSearch(loc) {\n  /*\n  * Returns a wider search than getBest()\n  *\n  * The response is accessed differently, with venues directly returned as array.\n  *   array:  myJson.venues\n  * */\n  var api = \"https://api.foursquare.com/v2/venues/search?\";\n  var food = \"4d4b7105d754a06374d81259\";\n  var myHeaders = new Headers();\n  var myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default'\n  };\n  myHeaders.append(\"Accept-Language\", \"en\");\n  return fetch(\"\".concat(api, \"client_id=\").concat(id, \"&client_secret=\").concat(secret, \"&v=\").concat(apiUpToDate, \"&limit=\").concat(limitResponses, \"&intent=browse&ll=\").concat(loc.lat, \",\").concat(loc.lng, \"&radius=500&categoryId=\").concat(food), myInit).then(function (res) {\n    return res.json();\n  }).catch(function (err) {\n    console.log(\"getSearch error, \", err);\n  });\n};\nexport var getPhotos = function getPhotos(idArr) {\n  // console.log(\"idArr \", idArr);\n  // Construct an array of \"fetch\" requests\n  var fetchArray = idArr.map(function (idPhoto) {\n    return fetch(\"\".concat(apiUrl).concat(apiFeature, \"/\").concat(idPhoto, \"/photos?client_id=\").concat(id, \"&client_secret=\").concat(secret, \"&v=\").concat(apiUpToDate));\n  }); // console.log(\"fetchArray: \", fetchArray);\n  // Fetch all, and wait for all to resolve,\n  // then return an array of responses converted to json()\n\n  return Promise.all(fetchArray).then(function (respArr) {\n    return respArr.map(function (response) {\n      return response.json();\n    }); // jsonResolvedArr: Array of resolved promises\n  });\n};\nexport var getQuery = function getQuery(query, loc) {\n  var match = new RegExp(escapeRegExp(query), 'i');\n  var food = \"4d4b7105d754a06374d81259\";\n  var api = \"https://api.foursquare.com/v2/venues/search?client_id=\".concat(id, \"&client_secret=\").concat(secret, \"&v=\").concat(apiUpToDate, \"&limit=\").concat(limitResponses, \"&intent=browse&ll=\").concat(loc.lat, \",\").concat(loc.lng, \"&radius=10000&categoryId=\").concat(food, \"&query=\").concat(match);\n  var myHeaders = new Headers();\n  var myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default'\n  };\n  myHeaders.append(\"Accept-Language\", \"en\");\n  return fetch(api, myInit).then(function (res) {\n    return res.json();\n  }).catch(function (err) {\n    console.log(\"Error on getQuery: \", err);\n  });\n};\nexport var getCategories = function getCategories(loc) {\n  var api = \"https://api.foursquare.com/v2/venues/categories?\";\n  var myHeaders = new Headers();\n  var myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default'\n  };\n  myHeaders.append(\"Accept-Language\", \"en\");\n  return fetch(\"\".concat(api, \"client_id=\").concat(id, \"&client_secret=\").concat(secret, \"&v=\").concat(apiUpToDate, \"&limit=\").concat(limitResponses, \"&intent=browse&ll=\").concat(loc.lat, \",\").concat(loc.lng, \"&radius=10000\"), myInit).then(function (res) {\n    return res.json();\n  }).catch(function (err) {\n    console.log(\"getSearch error, \", err);\n  });\n};","map":{"version":3,"sources":["/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/utils/FoursquareAPI.js"],"names":["escapeRegExp","secret","id","apiUpToDate","limitResponses","coffee","latlon","q","explore","venuApi","apiUrl","apiFeature","token","localStorage","Math","random","toString","substr","headers","exploreArea","location","exploreLoc","lat","lng","console","log","fetch","then","response","catch","err","getBest","loc","api","food","myHeaders","Headers","myInit","method","mode","cache","append","res","json","getSearch","getPhotos","idArr","fetchArray","map","idPhoto","Promise","all","respArr","getQuery","query","match","RegExp","getCategories"],"mappings":"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","sourcesContent":["\nimport escapeRegExp from 'escape-string-regexp'\nimport {secret, id} from './keys'\n\n// Useful documents:\n// https://github.com/foursquare/react-foursquare\n\n\nconst apiUpToDate = \"20181204\"; // Date I built this app, tells FourSquare to use an api version compatible with this date\nconst limitResponses = \"3\"; // Number of responses (I think maximum is 50)\n\nconst coffee = \"&v=20180323&limit=1\";\nconst latlon = \"&ll=40.7243,-74.0018\";\nconst q = \"&query=coffee\";\n\nlet explore = \"https://api.foursquare.com/v2/venues/explore\";\nlet venuApi = 'https://api.foursquare.com/v2/venues';\nlet apiUrl = \"https://api.foursquare.com/v2\";\nlet apiFeature = \"/venues\";\n\n\n\n// 'https://api.foursquare.com/v2/venues/explore?client_id=CLIENT_ID&client_secret=CLIENT_SECRET&v=20180323&limit=1&ll=40.7243,-74.0018&query=coffee'\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n};\n\nexport const exploreArea = (location) => {\n\n  let exploreLoc = explore + \"?ll=\" + location.lat.toString() + \",\" + location.lng.toString();\n  console.log(\"explore argument: \", exploreLoc);\n\n  fetch(exploreLoc)\n    .then( (response) => {\n      console.log(response)\n    })\n    .catch( (err) => {\n     console.log(err)\n  })\n};\n\n// export const exploreApi = (loc) => {\n//   return fetch(`${api}client_id=${id}&client_secret=${secret}&v=${apiUpToDate}&limit=${limitResponses}&ll=${loc.lat},${loc.lng}`, {})\n//     .then((res) => res.json())\n//     .catch( (err) => {\n//       console.log(\"Fetch error\", err)\n//     });\n// };\n\nexport const getBest = (loc) => {\n  /*\n  Uses the \"explore?\" Foursquare endpoint,\n  which searches only for recommended places.\n  Use the \"search?\" endpoint instead for a wider search.\n\n  To access the results array, the structure is:\n  array:  myJson.response.groups[0].items\n  * */\n\n  const api = \"https://api.foursquare.com/v2/venues/explore?\";\n  const food = \"4d4b7105d754a06374d81259\";\n\n  let myHeaders = new Headers();\n\n  const myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default' };\n\n  myHeaders.append(\"Accept-Language\", \"en\");\n\n  return fetch(`${api}client_id=${id}&client_secret=${secret}&v=${apiUpToDate}&limit=${limitResponses}&intent=browse&ll=${loc.lat},${loc.lng}&categoryId=${food}`, myInit)\n    .then((res) => res.json())\n    .catch( (err) => {\n      console.log(\"getBest error, \", err)\n    });\n};\n\nexport const getSearch = (loc) => {\n\n  /*\n  * Returns a wider search than getBest()\n  *\n  * The response is accessed differently, with venues directly returned as array.\n  *   array:  myJson.venues\n  * */\n\n  const api = \"https://api.foursquare.com/v2/venues/search?\";\n  const food = \"4d4b7105d754a06374d81259\";\n\n  let myHeaders = new Headers();\n\n  const myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default' };\n\n  myHeaders.append(\"Accept-Language\", \"en\");\n\n  return fetch(`${api}client_id=${id}&client_secret=${secret}&v=${apiUpToDate}&limit=${limitResponses}&intent=browse&ll=${loc.lat},${loc.lng}&radius=500&categoryId=${food}`, myInit)\n    .then((res) => res.json())\n    .catch( (err) => {\n      console.log(\"getSearch error, \", err)\n    });\n};\n\n\n\nexport const getPhotos = (idArr) => {\n  // console.log(\"idArr \", idArr);\n  // Construct an array of \"fetch\" requests\n  let fetchArray = idArr.map( idPhoto =>\n    (fetch(`${apiUrl}${apiFeature}/${idPhoto}/photos?client_id=${id}&client_secret=${secret}&v=${apiUpToDate}`)));\n  // console.log(\"fetchArray: \", fetchArray);\n\n  // Fetch all, and wait for all to resolve,\n  // then return an array of responses converted to json()\n  return Promise.all(fetchArray)\n    .then( respArr => {\n      return respArr.map( response => response.json());\n      // jsonResolvedArr: Array of resolved promises\n  });\n};\n\nexport const getQuery = (query, loc) => {\n  const match = new RegExp(escapeRegExp(query), 'i');\n  const food = \"4d4b7105d754a06374d81259\";\n  const api = `https://api.foursquare.com/v2/venues/search?client_id=${id}&client_secret=${secret}&v=${apiUpToDate}&limit=${limitResponses}&intent=browse&ll=${loc.lat},${loc.lng}&radius=10000&categoryId=${food}&query=${match}`;\n\n  let myHeaders = new Headers();\n\n  const myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default' };\n\n  myHeaders.append(\"Accept-Language\", \"en\");\n\n  return fetch(api, myInit)\n    .then((res) => res.json())\n    .catch((err) => {\n      console.log(\"Error on getQuery: \", err)\n    });\n};\n\nexport const getCategories = (loc) => {\n  const api = \"https://api.foursquare.com/v2/venues/categories?\";\n\n  let myHeaders = new Headers();\n\n  const myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default' };\n\n  myHeaders.append(\"Accept-Language\", \"en\");\n\n  return fetch(`${api}client_id=${id}&client_secret=${secret}&v=${apiUpToDate}&limit=${limitResponses}&intent=browse&ll=${loc.lat},${loc.lng}&radius=10000`, myInit)\n    .then((res) => res.json())\n    .catch( (err) => {\n      console.log(\"getSearch error, \", err)\n    });\n}\n\n\n"]},"metadata":{},"sourceType":"module"}