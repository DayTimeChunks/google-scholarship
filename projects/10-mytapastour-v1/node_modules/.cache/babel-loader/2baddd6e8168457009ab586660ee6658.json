{"ast":null,"code":"import _classCallCheck from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js\";\n\n/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\"; // Sources:\n// https://stackoverflow.com/questions/48493960/using-google-map-in-react-component  (best)\n// https://stackoverflow.com/questions/45429484/how-to-implement-google-maps-js-api-in-react-without-an-external-library\n// https://jsbin.com/tejutihoka/edit?js,output\n\nvar MapPromise =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapPromise, _Component);\n\n  function MapPromise(props) {\n    var _this;\n\n    _classCallCheck(this, MapPromise);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapPromise).call(this, props));\n\n    _this.populateInfoWindow = function (marker, infoWindow, map) {\n      if (infoWindow.marker != marker) {\n        infoWindow.marker = marker;\n        infoWindow.setContent(\"<div>\".concat(marker.title, \"</div>\"));\n        infoWindow.open(map, marker);\n        infoWindow.addListener('closeclick', function () {\n          infoWindow.setMarker = null;\n        });\n      }\n    };\n\n    _this.selectMarker = function (marker) {};\n\n    _this.state = {\n      mapIsReady: false,\n      map: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(MapPromise, [{\n    key: \"getGoogleMaps\",\n    value: function getGoogleMaps() {\n      // If we haven't already defined the promise, define it\n      if (!this.googleMapsPromise) {\n        this.googleMapsPromise = new Promise(function (resolve) {\n          // Add a global handler for when the API finishes loading\n          window.resolveGoogleMapsPromise = function () {\n            // Resolve the promise\n            resolve(google); // Tidy up\n\n            delete window.resolveGoogleMapsPromise;\n          }; // Load the Google Maps API\n\n\n          var script = document.createElement(\"script\");\n          var API = 'AIzaSyB8uwCpGazZQ4JvdwNQP9Jt0GH0FukWd-M';\n          script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(API, \"&callback=resolveGoogleMapsPromise\");\n          script.async = true;\n          document.body.appendChild(script);\n        });\n      } // Return a promise for the Google Maps API\n\n\n      return this.googleMapsPromise;\n    } // Method used on each marker upon creation\n\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      // Start Google Maps API loading since we know we'll soon need it\n      this.getGoogleMaps(); // console.log(\"tapas 1\", this.props.tapas);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Once the Google Maps API has finished loading, initialize the map\n      // NOTE: Moved content to componentDidUpdate() because props was still empty.\n      // console.log(\"tapas 2\", this.props.tapas);\n      this.getGoogleMaps().then(function (google) {\n        var center = {\n          lat: 50.121870,\n          lng: 8.689550\n        };\n        var map = new google.maps.Map(document.getElementById('map'), {\n          zoom: 13,\n          center: center,\n          mapTypeControl: false\n        });\n        return map;\n      }).then(function (map) {\n        _this2.setState({\n          map: map\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this3 = this;\n\n      console.log(\"tapas 3\", this.props.tapas);\n      var tapas = this.props.tapas;\n      var map = this.state.map;\n      var markers;\n      var largeInfoWindow = new google.maps.InfoWindow();\n      var bounds = new google.maps.LatLngBounds();\n      markers = tapas.map(function (tapa) {\n        var marker = new google.maps.Marker({\n          map: map,\n          position: {\n            lat: tapa.venue.location.lat,\n            lng: tapa.venue.location.lng\n          },\n          title: tapa.venue.name,\n          // animation: google.maps.Animation.DROP,\n          id: tapa.venue.id\n        });\n        marker.addListener('click', function () {\n          _this3.populateInfoWindow(marker, largeInfoWindow, map);\n        });\n\n        if (marker.id === _this3.props.checkedId) {\n          console.log(\"this\", _this3);\n          console.log(\"this\", _this3.props.checkedId);\n\n          _this3.populateInfoWindow(marker, largeInfoWindow, map);\n        } else {\n          largeInfoWindow.close(map, marker);\n        }\n\n        bounds.extend(marker.position);\n        return marker;\n      }); // Once the Google Maps API has finished loading,\n      // AND props loaded -> initialize the map\n      // this.getGoogleMaps().then((google) => {\n      //\n      //   const center = {lat: 50.121870, lng: 8.689550};\n      //   const map = new google.maps.Map(document.getElementById('map'), {\n      //     zoom: 13,\n      //     center: center,\n      //     mapTypeControl: false\n      //   });\n      //\n      //   let largeInfoWindow = new google.maps.InfoWindow();\n      //   let bounds = new google.maps.LatLngBounds();\n      //\n      //   markers = tapas.map(tapa => {\n      //     let marker = new google.maps.Marker({\n      //       map: map,\n      //       position: {lat: tapa.venue.location.lat, lng: tapa.venue.location.lng},\n      //       title: tapa.venue.name,\n      //       // animation: google.maps.Animation.DROP,\n      //       id: tapa.venue.id\n      //     });\n      //     marker.addListener('click', () => {\n      //       this.populateInfoWindow(marker, largeInfoWindow, map);\n      //     });\n      //     bounds.extend(marker.position);\n      //\n      //     if (marker.id === this.props.checkedId){\n      //       console.log(\"this\", this);\n      //       this.populateInfoWindow(marker, largeInfoWindow, map);\n      //     }\n      //\n      //     return marker;\n      //   });\n      //\n      //   // map.fitBounds(bounds)\n      //   console.log(\"Markers: \", markers);\n      //\n      // });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Filtered Locations\"), React.createElement(\"div\", {\n        id: \"map\",\n        style: {\n          width: 400,\n          height: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MapPromise;\n}(Component);\n\nMapPromise.propTypes = {\n  tapas: PropTypes.array,\n  checkedId: PropTypes.string\n};\nexport default MapPromise;","map":{"version":3,"sources":["/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js"],"names":["React","Component","PropTypes","MapPromise","props","populateInfoWindow","marker","infoWindow","map","setContent","title","open","addListener","setMarker","selectMarker","state","mapIsReady","googleMapsPromise","Promise","resolve","window","resolveGoogleMapsPromise","google","script","document","createElement","API","src","async","body","appendChild","getGoogleMaps","then","center","lat","lng","maps","Map","getElementById","zoom","mapTypeControl","setState","console","log","tapas","markers","largeInfoWindow","InfoWindow","bounds","LatLngBounds","tapa","Marker","position","venue","location","name","id","checkedId","close","extend","width","height","propTypes","array","string"],"mappings":"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","sourcesContent":["/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\n// Sources:\n// https://stackoverflow.com/questions/48493960/using-google-map-in-react-component  (best)\n// https://stackoverflow.com/questions/45429484/how-to-implement-google-maps-js-api-in-react-without-an-external-library\n// https://jsbin.com/tejutihoka/edit?js,output\n\nclass MapPromise extends Component {\n\n  static propTypes = {\n    tapas: PropTypes.array,\n    checkedId: PropTypes.string\n  };\n\n  constructor(props){\n    super(props);\n    this.state = {\n      mapIsReady: false,\n      map: \"\"\n    };\n  }\n\n  getGoogleMaps() {\n    // If we haven't already defined the promise, define it\n    if (!this.googleMapsPromise) {\n      this.googleMapsPromise = new Promise((resolve) => {\n        // Add a global handler for when the API finishes loading\n        window.resolveGoogleMapsPromise = () => {\n          // Resolve the promise\n          resolve(google);\n\n          // Tidy up\n          delete window.resolveGoogleMapsPromise;\n        };\n\n        // Load the Google Maps API\n        const script = document.createElement(\"script\");\n        const API = 'AIzaSyB8uwCpGazZQ4JvdwNQP9Jt0GH0FukWd-M';\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\n        script.async = true;\n        document.body.appendChild(script);\n      });\n    }\n\n    // Return a promise for the Google Maps API\n    return this.googleMapsPromise;\n  }\n\n  // Method used on each marker upon creation\n  populateInfoWindow = (marker, infoWindow, map) => {\n    if (infoWindow.marker != marker){\n      infoWindow.marker = marker;\n      infoWindow.setContent(`<div>${marker.title}</div>`);\n      infoWindow.open(map, marker);\n\n      infoWindow.addListener('closeclick', ()=>{\n        infoWindow.setMarker = null;\n      })\n    }\n  };\n\n  selectMarker = (marker) => {\n\n  };\n\n  componentWillMount() {\n    // Start Google Maps API loading since we know we'll soon need it\n    this.getGoogleMaps();\n    // console.log(\"tapas 1\", this.props.tapas);\n  }\n\n  componentDidMount() {\n    // Once the Google Maps API has finished loading, initialize the map\n    // NOTE: Moved content to componentDidUpdate() because props was still empty.\n    // console.log(\"tapas 2\", this.props.tapas);\n\n    this.getGoogleMaps().then((google) => {\n      const center = {lat: 50.121870, lng: 8.689550};\n      const map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 13,\n        center: center,\n        mapTypeControl: false\n      });\n\n      return map;\n\n    }).then(map => {\n      this.setState({map: map})\n    })\n\n  }\n\n  componentDidUpdate(){\n    console.log(\"tapas 3\", this.props.tapas);\n\n    const {tapas} = this.props;\n    const {map} = this.state;\n    let markers;\n\n    let largeInfoWindow = new google.maps.InfoWindow();\n    let bounds = new google.maps.LatLngBounds();\n\n    markers = tapas.map(tapa => {\n      let marker = new google.maps.Marker({\n        map: map,\n        position: {lat: tapa.venue.location.lat, lng: tapa.venue.location.lng},\n        title: tapa.venue.name,\n        // animation: google.maps.Animation.DROP,\n        id: tapa.venue.id\n      });\n      marker.addListener('click', () => {\n        this.populateInfoWindow(marker, largeInfoWindow, map);\n      });\n\n      if (marker.id === this.props.checkedId){\n        console.log(\"this\", this);\n        console.log(\"this\", this.props.checkedId);\n\n        this.populateInfoWindow(marker, largeInfoWindow, map);\n      } else {\n        largeInfoWindow.close(map, marker);\n      }\n\n      bounds.extend(marker.position);\n\n      return marker;\n    });\n\n    // Once the Google Maps API has finished loading,\n    // AND props loaded -> initialize the map\n    // this.getGoogleMaps().then((google) => {\n    //\n    //   const center = {lat: 50.121870, lng: 8.689550};\n    //   const map = new google.maps.Map(document.getElementById('map'), {\n    //     zoom: 13,\n    //     center: center,\n    //     mapTypeControl: false\n    //   });\n    //\n    //   let largeInfoWindow = new google.maps.InfoWindow();\n    //   let bounds = new google.maps.LatLngBounds();\n    //\n    //   markers = tapas.map(tapa => {\n    //     let marker = new google.maps.Marker({\n    //       map: map,\n    //       position: {lat: tapa.venue.location.lat, lng: tapa.venue.location.lng},\n    //       title: tapa.venue.name,\n    //       // animation: google.maps.Animation.DROP,\n    //       id: tapa.venue.id\n    //     });\n    //     marker.addListener('click', () => {\n    //       this.populateInfoWindow(marker, largeInfoWindow, map);\n    //     });\n    //     bounds.extend(marker.position);\n    //\n    //     if (marker.id === this.props.checkedId){\n    //       console.log(\"this\", this);\n    //       this.populateInfoWindow(marker, largeInfoWindow, map);\n    //     }\n    //\n    //     return marker;\n    //   });\n    //\n    //   // map.fitBounds(bounds)\n    //   console.log(\"Markers: \", markers);\n    //\n    // });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Filtered Locations</h1>\n        <div id=\"map\" style={{width: 400, height: 300}}></div>\n      </div>\n    )\n  }\n}\n\nexport default MapPromise;"]},"metadata":{},"sourceType":"module"}