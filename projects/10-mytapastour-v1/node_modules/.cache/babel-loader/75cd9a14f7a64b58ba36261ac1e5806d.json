{"ast":null,"code":"import _classCallCheck from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js\";\n\n/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\"; // Global \"markers\" variable is not ideal, but alternative\n// would be to re-mount the Google Maps Api after every new search\n// by changing the component's key value.\n\nvar markers; // Sources:\n// https://stackoverflow.com/questions/48493960/using-google-map-in-react-component  (best)\n// https://stackoverflow.com/questions/45429484/how-to-implement-google-maps-js-api-in-react-without-an-external-library\n// https://jsbin.com/tejutihoka/edit?js,output\n\nvar MapPromise =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapPromise, _Component);\n\n  function MapPromise(props) {\n    var _this;\n\n    _classCallCheck(this, MapPromise);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapPromise).call(this, props));\n\n    _this.populateInfoWindow = function (marker, infoWindow, map) {\n      console.log(\"Marker: \", marker);\n      marker.setAnimation(google.maps.Animation.BOUNCE);\n      setTimeout(function () {\n        marker.setAnimation(null);\n      }, 1000);\n      marker.setIcon(marker.mIcon);\n      infoWindow.marker = marker;\n      infoWindow.setContent(\"<div class=\\\"text-center\\\"><h5>\".concat(marker.title, \"</h5><p>\").concat(marker.category, \"</p></div>\"));\n      infoWindow.open(map, marker); // Check that only one element on the venue list is highlighted\n\n      var selections = document.getElementsByClassName(\"highlight\");\n\n      if (selections && selections.length > 0) {\n        Array.prototype.map.call(selections, function (el) {\n          return el.classList.remove(\"highlight\");\n        });\n      }\n\n      document.getElementById(marker.id).classList.add(\"highlight\");\n      infoWindow.addListener('closeclick', function () {\n        marker.setIcon(null);\n        infoWindow.marker = null;\n\n        _this.props.handleInfoClose(marker.id);\n\n        var openMarker = document.getElementById(marker.id);\n\n        if (openMarker) {\n          openMarker.classList.remove(\"highlight\");\n        }\n      });\n    };\n\n    _this.state = {\n      mapIsReady: false,\n      map: \"\",\n      // markers: \"\", // Cannot setState in componentDidUpdate()\n      infoWindow: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(MapPromise, [{\n    key: \"getGoogleMaps\",\n    value: function getGoogleMaps() {\n      // If we haven't already defined the promise, define it\n      if (!this.googleMapsPromise) {\n        this.googleMapsPromise = new Promise(function (resolve) {\n          // Add a global handler for when the API finishes loading\n          window.resolveGoogleMapsPromise = function () {\n            // Resolve the promise\n            resolve(google); // Tidy up\n\n            delete window.resolveGoogleMapsPromise;\n          }; // Load the Google Maps API\n\n\n          var script = document.createElement(\"script\");\n          var API = 'AIzaSyCEhfBMzJxAaTKLtp8GjcVwEZobHckXXis';\n          script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(API, \"&callback=resolveGoogleMapsPromise\");\n          script.async = true;\n          document.body.appendChild(script);\n        });\n      } // Return a promise for the Google Maps API\n\n\n      return this.googleMapsPromise;\n    } // Method used on each marker upon creation or if list item is checked\n\n  }, {\n    key: \"addMapMarkers\",\n    value: function addMapMarkers() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          tapas = _this$props.tapas,\n          recommend = _this$props.recommend;\n      var _this$state = this.state,\n          map = _this$state.map,\n          infoWindow = _this$state.infoWindow;\n      var bounds = new google.maps.LatLngBounds(); // Function returns the markers array (to global scope?)\n\n      return tapas.map(function (tapa) {\n        var venue;\n\n        if (recommend) {\n          venue = tapa.venue;\n        } else {\n          venue = tapa;\n        }\n\n        var marker = new google.maps.Marker({\n          map: map,\n          position: {\n            lat: venue.location.lat,\n            lng: venue.location.lng\n          },\n          title: venue.name,\n          // animation: google.maps.Animation.DROP,\n          id: venue.id,\n          category: venue.categories[0].name,\n          mIcon: \"\".concat(venue.categories[0].icon.prefix, \"bg_32\").concat(venue.categories[0].icon.suffix)\n        });\n        marker.addListener('click', function () {\n          if (infoWindow.marker != marker) {\n            _this2.populateInfoWindow(marker, infoWindow, map);\n          }\n        });\n        bounds.extend(marker.position);\n        return marker;\n      }); // markers.map(marker => {marker.setMap(null)})\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      console.log(\"Will mount\"); // Start Google Maps API loading since we know we'll soon need it\n      // this.getGoogleMaps();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      console.log(\"Map Did Mount\"); // Once the Google Maps API has finished loading, initialize the map\n      // NOTE: Moved content to componentDidUpdate() because props was still empty at this point.\n\n      this.getGoogleMaps().then(function (google) {\n        var center = {\n          lat: 50.121870,\n          lng: 8.689550\n        };\n        var map = new google.maps.Map(document.getElementById('map'), {\n          zoom: 13,\n          center: center,\n          mapTypeControl: false\n        });\n        var largeInfoWindow = new google.maps.InfoWindow();\n        console.log(\"infowindow Mount:\", largeInfoWindow);\n        return {\n          map: map,\n          window: largeInfoWindow\n        };\n      }).then(function (obj) {\n        _this3.setState({\n          map: obj.map,\n          infoWindow: obj.window\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$props2 = this.props,\n          tapas = _this$props2.tapas,\n          checkedId = _this$props2.checkedId,\n          recommend = _this$props2.recommend;\n      var _this$state2 = this.state,\n          map = _this$state2.map,\n          infoWindow = _this$state2.infoWindow; // Closes info window when list item gets clicked (on un-check)\n\n      if (infoWindow.marker) {\n        infoWindow.close();\n      }\n\n      if (markers) {\n        markers.map(function (marker) {\n          marker.setMap(null);\n        });\n      }\n\n      markers = this.addMapMarkers(); // Populates marker when list item gets clicked (on-check)\n\n      for (var i = 0; i < markers.length; i++) {\n        if (markers[i].id === checkedId) {\n          this.populateInfoWindow(markers[i], infoWindow, map);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log(\"unmounted\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        style: {\n          height: '90vh',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"map\",\n        style: {\n          height: '100%',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MapPromise;\n}(Component);\n\nMapPromise.propTypes = {\n  recommend: PropTypes.bool,\n  tapas: PropTypes.array,\n  checkedId: PropTypes.string,\n  handleInfoClose: PropTypes.func\n};\nexport default MapPromise; // {/*<div id=\"map\" style={{width: 400, height: 300}}></div>*/}","map":{"version":3,"sources":["/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js"],"names":["React","Component","PropTypes","markers","MapPromise","props","populateInfoWindow","marker","infoWindow","map","console","log","setAnimation","google","maps","Animation","BOUNCE","setTimeout","setIcon","mIcon","setContent","title","category","open","selections","document","getElementsByClassName","length","Array","prototype","call","el","classList","remove","getElementById","id","add","addListener","handleInfoClose","openMarker","state","mapIsReady","googleMapsPromise","Promise","resolve","window","resolveGoogleMapsPromise","script","createElement","API","src","async","body","appendChild","tapas","recommend","bounds","LatLngBounds","tapa","venue","Marker","position","lat","location","lng","name","categories","icon","prefix","suffix","extend","getGoogleMaps","then","center","Map","zoom","mapTypeControl","largeInfoWindow","InfoWindow","obj","setState","checkedId","close","setMap","addMapMarkers","i","height","width","propTypes","bool","array","string","func"],"mappings":"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","sourcesContent":["/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\n// Global \"markers\" variable is not ideal, but alternative\n// would be to re-mount the Google Maps Api after every new search\n// by changing the component's key value.\nlet markers;\n\n// Sources:\n// https://stackoverflow.com/questions/48493960/using-google-map-in-react-component  (best)\n// https://stackoverflow.com/questions/45429484/how-to-implement-google-maps-js-api-in-react-without-an-external-library\n// https://jsbin.com/tejutihoka/edit?js,output\n\nclass MapPromise extends Component {\n\n  static propTypes = {\n    recommend: PropTypes.bool,\n    tapas: PropTypes.array,\n    checkedId: PropTypes.string,\n    handleInfoClose: PropTypes.func\n  };\n\n  constructor(props){\n    super(props);\n    this.state = {\n      mapIsReady: false,\n      map: \"\",\n      // markers: \"\", // Cannot setState in componentDidUpdate()\n      infoWindow: \"\"\n    };\n  }\n\n  getGoogleMaps() {\n    // If we haven't already defined the promise, define it\n    if (!this.googleMapsPromise) {\n      this.googleMapsPromise = new Promise((resolve) => {\n        // Add a global handler for when the API finishes loading\n        window.resolveGoogleMapsPromise = () => {\n          // Resolve the promise\n          resolve(google);\n\n          // Tidy up\n          delete window.resolveGoogleMapsPromise;\n        };\n\n        // Load the Google Maps API\n        const script = document.createElement(\"script\");\n        const API = 'AIzaSyCEhfBMzJxAaTKLtp8GjcVwEZobHckXXis';\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\n        script.async = true;\n        document.body.appendChild(script);\n      });\n    }\n    // Return a promise for the Google Maps API\n    return this.googleMapsPromise;\n  }\n\n  // Method used on each marker upon creation or if list item is checked\n  populateInfoWindow = (marker, infoWindow, map) => {\n\n    console.log(\"Marker: \", marker);\n    marker.setAnimation(google.maps.Animation.BOUNCE);\n    setTimeout(() => {\n      marker.setAnimation(null);\n    }, 1000);\n\n    marker.setIcon(marker.mIcon);\n\n\n    infoWindow.marker = marker;\n    infoWindow.setContent(\n      `<div class=\"text-center\"><h5>${marker.title}</h5><p>${marker.category}</p></div>`);\n    infoWindow.open(map, marker);\n\n    // Check that only one element on the venue list is highlighted\n    let selections = document.getElementsByClassName(\"highlight\");\n    if (selections && selections.length > 0) {\n      Array.prototype.map.call(selections, el => el.classList.remove(\"highlight\") );\n    }\n    document.getElementById(marker.id).classList.add(\"highlight\");\n\n\n    infoWindow.addListener('closeclick', ()=>{\n      marker.setIcon(null);\n      infoWindow.marker = null;\n      this.props.handleInfoClose(marker.id);\n      let openMarker = document.getElementById(marker.id);\n      if (openMarker){ openMarker.classList.remove(\"highlight\"); }\n\n    });\n\n  };\n\n  addMapMarkers() {\n    const {tapas, recommend} = this.props;\n    const {map, infoWindow} = this.state;\n\n    let bounds = new google.maps.LatLngBounds();\n\n    // Function returns the markers array (to global scope?)\n    return tapas.map(tapa => {\n      let venue;\n      if (recommend){\n        venue = tapa.venue;\n      } else {\n        venue = tapa;\n      }\n\n      let marker = new google.maps.Marker({\n        map: map,\n        position: {lat: venue.location.lat, lng: venue.location.lng},\n        title: venue.name,\n        // animation: google.maps.Animation.DROP,\n        id: venue.id,\n        category: venue.categories[0].name,\n        mIcon: `${venue.categories[0].icon.prefix}bg_32${venue.categories[0].icon.suffix}`\n\n      });\n      marker.addListener('click', () => {\n        if (infoWindow.marker != marker){\n          this.populateInfoWindow(marker, infoWindow, map);\n        }\n      });\n      bounds.extend(marker.position);\n\n      return marker;\n    });\n\n    // markers.map(marker => {marker.setMap(null)})\n  }\n\n  componentWillMount() {\n    console.log(\"Will mount\")\n    // Start Google Maps API loading since we know we'll soon need it\n    // this.getGoogleMaps();\n\n  }\n\n  componentDidMount() {\n    console.log(\"Map Did Mount\");\n    // Once the Google Maps API has finished loading, initialize the map\n    // NOTE: Moved content to componentDidUpdate() because props was still empty at this point.\n    this.getGoogleMaps().then((google) => {\n      const center = {lat: 50.121870, lng: 8.689550};\n      const map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 13,\n        center: center,\n        mapTypeControl: false\n      });\n\n      let largeInfoWindow = new google.maps.InfoWindow();\n\n      console.log(\"infowindow Mount:\" , largeInfoWindow)\n\n\n      return {map:map, window: largeInfoWindow};\n\n    }).then(obj => {\n      this.setState({\n        map: obj.map,\n        infoWindow: obj.window\n      })\n    })\n  }\n\n  componentDidUpdate(){\n\n    const {tapas, checkedId, recommend} = this.props;\n    const {map, infoWindow} = this.state;\n\n    // Closes info window when list item gets clicked (on un-check)\n    if (infoWindow.marker){\n      infoWindow.close();\n    }\n\n    if (markers){\n      markers.map( marker => {\n        marker.setMap(null)\n      })\n    }\n\n    markers = this.addMapMarkers();\n\n    // Populates marker when list item gets clicked (on-check)\n    for (let i = 0; i < markers.length; i++){\n      if (markers[i].id === checkedId){\n        this.populateInfoWindow(markers[i], infoWindow, map);\n      }\n    }\n  }\n\n  componentWillUnmount(){\n    console.log(\"unmounted\");\n  }\n\n\n\n  render() {\n    return (\n      <div style={{ height: '90vh', width: '100%' }} >\n        <div id=\"map\" style={{ height: '100%', width: '100%' }}></div>\n      </div>\n    )\n  }\n}\n\nexport default MapPromise;\n\n// {/*<div id=\"map\" style={{width: 400, height: 300}}></div>*/}"]},"metadata":{},"sourceType":"module"}