{"ast":null,"code":"import _classCallCheck from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js\";\n\n/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\"; // Sources:\n// https://stackoverflow.com/questions/48493960/using-google-map-in-react-component  (best)\n// https://stackoverflow.com/questions/45429484/how-to-implement-google-maps-js-api-in-react-without-an-external-library\n// https://jsbin.com/tejutihoka/edit?js,output\n\nvar MapLocations =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapLocations, _Component);\n\n  function MapLocations(props) {\n    var _this;\n\n    _classCallCheck(this, MapLocations);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapLocations).call(this, props));\n\n    _this.populateInfoWindow = function (marker, infoWindow, map) {\n      if (infoWindow.marker != marker) {\n        infoWindow.marker = marker;\n        infoWindow.setContent(\"<div>\".concat(marker.title, \"</div>\"));\n        infoWindow.open(map, marker); // Generated error with 'CORS' policy?\n        // infoWindow.addListener('closeclick', ()=>{\n        //   infoWindow.setMarker(null);\n        // })\n      }\n    };\n\n    _this.selectMarker = function (marker) {};\n\n    _this.state = {\n      mapIsReady: false\n    };\n    return _this;\n  }\n\n  _createClass(MapLocations, [{\n    key: \"getGoogleMaps\",\n    value: function getGoogleMaps() {\n      // If we haven't already defined the promise, define it\n      if (!this.googleMapsPromise) {\n        this.googleMapsPromise = new Promise(function (resolve) {\n          // Add a global handler for when the API finishes loading\n          window.resolveGoogleMapsPromise = function () {\n            // Resolve the promise\n            resolve(google); // Tidy up\n\n            delete window.resolveGoogleMapsPromise;\n          }; // Load the Google Maps API\n\n\n          var script = document.createElement(\"script\");\n          var API = 'AIzaSyB8uwCpGazZQ4JvdwNQP9Jt0GH0FukWd-M';\n          script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(API, \"&callback=resolveGoogleMapsPromise\");\n          script.async = true;\n          document.body.appendChild(script);\n        });\n      } // Return a promise for the Google Maps API\n\n\n      return this.googleMapsPromise;\n    } // Method used on each marker upon creation\n\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      // Start Google Maps API loading since we know we'll soon need it\n      this.getGoogleMaps(); // console.log(\"tapas 1\", this.props.tapas);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// Once the Google Maps API has finished loading, initialize the map\n      // NOTE: Moved content to componentDidUpdate() because props was still empty.\n      // console.log(\"tapas 2\", this.props.tapas);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      console.log(\"tapas 3\", this.props.tapas);\n      var tapas = this.props.tapas;\n      var markers; // Once the Google Maps API has finished loading,\n      // AND props loaded -> initialize the map\n\n      this.getGoogleMaps().then(function (google) {\n        var center = {\n          lat: 50.121870,\n          lng: 8.689550\n        };\n        var map = new google.maps.Map(document.getElementById('map'), {\n          zoom: 13,\n          center: center,\n          mapTypeControl: false\n        });\n        var largeInfoWindow = new google.maps.InfoWindow();\n        var bounds = new google.maps.LatLngBounds();\n        markers = tapas.map(function (tapa) {\n          var marker = new google.maps.Marker({\n            map: map,\n            position: {\n              lat: tapa.venue.location.lat,\n              lng: tapa.venue.location.lng\n            },\n            title: tapa.venue.name,\n            animation: google.maps.Animation.DROP,\n            id: tapa.venue.id\n          });\n          marker.addListener('click', function () {\n            _this2.populateInfoWindow(marker, largeInfoWindow, map);\n          });\n          bounds.extend(marker.position);\n          return marker;\n        });\n        map.fitBounds(bounds);\n        console.log(\"Markers: \", markers);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Filtered Locations\"), React.createElement(\"div\", {\n        id: \"map\",\n        style: {\n          width: 400,\n          height: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MapLocations;\n}(Component);\n\nMapLocations.propTypes = {\n  tapas: PropTypes.array\n};\nexport default MapLocations;","map":{"version":3,"sources":["/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js"],"names":["React","Component","PropTypes","MapLocations","props","populateInfoWindow","marker","infoWindow","map","setContent","title","open","selectMarker","state","mapIsReady","googleMapsPromise","Promise","resolve","window","resolveGoogleMapsPromise","google","script","document","createElement","API","src","async","body","appendChild","getGoogleMaps","console","log","tapas","markers","then","center","lat","lng","maps","Map","getElementById","zoom","mapTypeControl","largeInfoWindow","InfoWindow","bounds","LatLngBounds","tapa","Marker","position","venue","location","name","animation","Animation","DROP","id","addListener","extend","fitBounds","width","height","propTypes","array"],"mappings":"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","sourcesContent":["/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\n// Sources:\n// https://stackoverflow.com/questions/48493960/using-google-map-in-react-component  (best)\n// https://stackoverflow.com/questions/45429484/how-to-implement-google-maps-js-api-in-react-without-an-external-library\n// https://jsbin.com/tejutihoka/edit?js,output\n\nclass MapLocations extends Component {\n\n  static propTypes = {\n    tapas: PropTypes.array,\n  };\n\n  constructor(props){\n    super(props);\n    this.state = {\n      mapIsReady: false,\n    };\n  }\n\n  getGoogleMaps() {\n    // If we haven't already defined the promise, define it\n    if (!this.googleMapsPromise) {\n      this.googleMapsPromise = new Promise((resolve) => {\n        // Add a global handler for when the API finishes loading\n        window.resolveGoogleMapsPromise = () => {\n          // Resolve the promise\n          resolve(google);\n\n          // Tidy up\n          delete window.resolveGoogleMapsPromise;\n        };\n\n        // Load the Google Maps API\n        const script = document.createElement(\"script\");\n        const API = 'AIzaSyB8uwCpGazZQ4JvdwNQP9Jt0GH0FukWd-M';\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\n        script.async = true;\n        document.body.appendChild(script);\n      });\n    }\n\n    // Return a promise for the Google Maps API\n    return this.googleMapsPromise;\n  }\n\n  // Method used on each marker upon creation\n  populateInfoWindow = (marker, infoWindow, map) => {\n    if (infoWindow.marker != marker){\n      infoWindow.marker = marker;\n      infoWindow.setContent(`<div>${marker.title}</div>`);\n      infoWindow.open(map, marker);\n\n      // Generated error with 'CORS' policy?\n      // infoWindow.addListener('closeclick', ()=>{\n      //   infoWindow.setMarker(null);\n      // })\n    }\n  };\n\n  selectMarker = (marker) => {\n\n  };\n\n  componentWillMount() {\n    // Start Google Maps API loading since we know we'll soon need it\n    this.getGoogleMaps();\n    // console.log(\"tapas 1\", this.props.tapas);\n  }\n\n  componentDidMount() {\n    // Once the Google Maps API has finished loading, initialize the map\n    // NOTE: Moved content to componentDidUpdate() because props was still empty.\n    // console.log(\"tapas 2\", this.props.tapas);\n  }\n\n  componentDidUpdate(){\n    console.log(\"tapas 3\", this.props.tapas);\n\n    const {tapas} = this.props;\n    let markers;\n\n    // Once the Google Maps API has finished loading,\n    // AND props loaded -> initialize the map\n    this.getGoogleMaps().then((google) => {\n\n      const center = {lat: 50.121870, lng: 8.689550};\n      const map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 13,\n        center: center,\n        mapTypeControl: false\n      });\n\n      let largeInfoWindow = new google.maps.InfoWindow();\n      let bounds = new google.maps.LatLngBounds();\n\n      markers = tapas.map(tapa => {\n        let marker = new google.maps.Marker({\n          map: map,\n          position: {lat: tapa.venue.location.lat, lng: tapa.venue.location.lng},\n          title: tapa.venue.name,\n          animation: google.maps.Animation.DROP,\n          id: tapa.venue.id\n        });\n        marker.addListener('click', () => {\n          this.populateInfoWindow(marker, largeInfoWindow, map);\n        });\n        bounds.extend(marker.position);\n        return marker;\n      });\n\n      map.fitBounds(bounds)\n      console.log(\"Markers: \", markers);\n\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Filtered Locations</h1>\n        <div id=\"map\" style={{width: 400, height: 300}}></div>\n      </div>\n    )\n  }\n}\n\nexport default MapLocations;"]},"metadata":{},"sourceType":"module"}