{"ast":null,"code":"import _classCallCheck from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js\";\n\n/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\"; // Sources:\n// https://stackoverflow.com/questions/48493960/using-google-map-in-react-component  (best)\n// https://stackoverflow.com/questions/45429484/how-to-implement-google-maps-js-api-in-react-without-an-external-library\n// https://jsbin.com/tejutihoka/edit?js,output\n\nvar MapPromise =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapPromise, _Component);\n\n  function MapPromise(props) {\n    var _this;\n\n    _classCallCheck(this, MapPromise);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapPromise).call(this, props));\n\n    _this.populateInfoWindow = function (marker, infoWindow, map) {\n      var checkedId = _this.props.checkedId;\n\n      if (infoWindow.marker != marker) {\n        console.log(\"Enter populate\", infoWindow.marker);\n        infoWindow.marker = marker;\n        infoWindow.setContent(\"<div>\".concat(marker.title, \"</div>\"));\n        infoWindow.open(map, marker);\n        infoWindow.addListener('closeclick', function () {\n          infoWindow.marker = null; // this.setState({\n          //   checkedId: \"\"\n          // })\n        });\n      }\n\n      console.log(\"pop:\", infoWindow.marker);\n    };\n\n    _this.state = {\n      mapIsReady: false,\n      map: \"\",\n      infoWindow: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(MapPromise, [{\n    key: \"getGoogleMaps\",\n    value: function getGoogleMaps() {\n      // If we haven't already defined the promise, define it\n      if (!this.googleMapsPromise) {\n        this.googleMapsPromise = new Promise(function (resolve) {\n          // Add a global handler for when the API finishes loading\n          window.resolveGoogleMapsPromise = function () {\n            // Resolve the promise\n            resolve(google); // Tidy up\n\n            delete window.resolveGoogleMapsPromise;\n          }; // Load the Google Maps API\n\n\n          var script = document.createElement(\"script\");\n          var API = 'AIzaSyCEhfBMzJxAaTKLtp8GjcVwEZobHckXXis';\n          script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(API, \"&callback=resolveGoogleMapsPromise\");\n          script.async = true;\n          document.body.appendChild(script);\n        });\n      } // Return a promise for the Google Maps API\n\n\n      return this.googleMapsPromise;\n    } // Method used on each marker upon creation\n\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      // Start Google Maps API loading since we know we'll soon need it\n      this.getGoogleMaps(); // console.log(\"tapas 1\", this.props.tapas);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Once the Google Maps API has finished loading, initialize the map\n      // NOTE: Moved content to componentDidUpdate() because props was still empty.\n      // console.log(\"tapas 2\", this.props.tapas);\n      console.log(\"Start ComponentDidMount\");\n      this.getGoogleMaps().then(function (google) {\n        var center = {\n          lat: 50.121870,\n          lng: 8.689550\n        };\n        var map = new google.maps.Map(document.getElementById('map'), {\n          zoom: 13,\n          center: center,\n          mapTypeControl: false\n        });\n        var largeInfoWindow = new google.maps.InfoWindow();\n        console.log(\"infowindow:\", largeInfoWindow);\n        return {\n          map: map,\n          window: largeInfoWindow\n        };\n      }).then(function (obj) {\n        _this2.setState({\n          map: obj.map,\n          infoWindow: obj.window\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          tapas = _this$props.tapas,\n          checkedId = _this$props.checkedId;\n      var _this$state = this.state,\n          map = _this$state.map,\n          infoWindow = _this$state.infoWindow;\n      var markers;\n      var bounds = new google.maps.LatLngBounds();\n      markers = tapas.map(function (tapa) {\n        var marker = new google.maps.Marker({\n          map: map,\n          position: {\n            lat: tapa.venue.location.lat,\n            lng: tapa.venue.location.lng\n          },\n          title: tapa.venue.name,\n          // animation: google.maps.Animation.DROP,\n          id: tapa.venue.id\n        });\n        marker.addListener('click', function () {\n          _this3.populateInfoWindow(marker, infoWindow, map);\n        });\n        bounds.extend(marker.position);\n        return marker;\n      });\n      console.log(\"ComponentDidUpdate:\", infoWindow.marker);\n      console.log(\"DidUpdate checkedId:\", checkedId);\n\n      if (infoWindow.marker) {\n        console.log(\"DidUpdate marker.id:\", infoWindow.marker.id);\n        infoWindow.close();\n      }\n\n      for (var i = 0; i < markers.length; i++) {\n        if (markers[i].id === checkedId) {\n          console.log(\"markers[i]:\", markers[i]);\n          infoWindow.marker = markers[i];\n          infoWindow.setContent(\"<div>\".concat(markers[i].title, \"</div>\"));\n          infoWindow.open(map, markers[i]);\n          infoWindow.addListener('closeclick', function () {\n            infoWindow.marker = null; // this.setState({\n            //   checkedId: \"\"\n            // })\n          });\n        }\n      } // Once the Google Maps API has finished loading,\n      // AND props loaded -> initialize the map\n      // this.getGoogleMaps().then((google) => {\n      //\n      //   const center = {lat: 50.121870, lng: 8.689550};\n      //   const map = new google.maps.Map(document.getElementById('map'), {\n      //     zoom: 13,\n      //     center: center,\n      //     mapTypeControl: false\n      //   });\n      //\n      //   let largeInfoWindow = new google.maps.InfoWindow();\n      //   let bounds = new google.maps.LatLngBounds();\n      //\n      //   markers = tapas.map(tapa => {\n      //     let marker = new google.maps.Marker({\n      //       map: map,\n      //       position: {lat: tapa.venue.location.lat, lng: tapa.venue.location.lng},\n      //       title: tapa.venue.name,\n      //       // animation: google.maps.Animation.DROP,\n      //       id: tapa.venue.id\n      //     });\n      //     marker.addListener('click', () => {\n      //       this.populateInfoWindow(marker, largeInfoWindow, map);\n      //     });\n      //     bounds.extend(marker.position);\n      //\n      //     if (marker.id === this.props.checkedId){\n      //       console.log(\"this\", this);\n      //       this.populateInfoWindow(marker, largeInfoWindow, map);\n      //     }\n      //\n      //     return marker;\n      //   });\n      //\n      //   // map.fitBounds(bounds)\n      //   console.log(\"Markers: \", markers);\n      //\n      // });\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Filtered Locations\"), React.createElement(\"div\", {\n        id: \"map\",\n        style: {\n          width: 400,\n          height: 300\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MapPromise;\n}(Component);\n\nMapPromise.propTypes = {\n  tapas: PropTypes.array,\n  checkedId: PropTypes.string\n};\nexport default MapPromise;","map":{"version":3,"sources":["/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/components/MapPromise.js"],"names":["React","Component","PropTypes","MapPromise","props","populateInfoWindow","marker","infoWindow","map","checkedId","console","log","setContent","title","open","addListener","state","mapIsReady","googleMapsPromise","Promise","resolve","window","resolveGoogleMapsPromise","google","script","document","createElement","API","src","async","body","appendChild","getGoogleMaps","then","center","lat","lng","maps","Map","getElementById","zoom","mapTypeControl","largeInfoWindow","InfoWindow","obj","setState","tapas","markers","bounds","LatLngBounds","tapa","Marker","position","venue","location","name","id","extend","close","i","length","width","height","propTypes","array","string"],"mappings":"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","sourcesContent":["/* global google */\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\n// Sources:\n// https://stackoverflow.com/questions/48493960/using-google-map-in-react-component  (best)\n// https://stackoverflow.com/questions/45429484/how-to-implement-google-maps-js-api-in-react-without-an-external-library\n// https://jsbin.com/tejutihoka/edit?js,output\n\nclass MapPromise extends Component {\n\n  static propTypes = {\n    tapas: PropTypes.array,\n    checkedId: PropTypes.string\n  };\n\n  constructor(props){\n    super(props);\n    this.state = {\n      mapIsReady: false,\n      map: \"\",\n      infoWindow: \"\"\n    };\n  }\n\n  getGoogleMaps() {\n    // If we haven't already defined the promise, define it\n    if (!this.googleMapsPromise) {\n      this.googleMapsPromise = new Promise((resolve) => {\n        // Add a global handler for when the API finishes loading\n        window.resolveGoogleMapsPromise = () => {\n          // Resolve the promise\n          resolve(google);\n\n          // Tidy up\n          delete window.resolveGoogleMapsPromise;\n        };\n\n        // Load the Google Maps API\n        const script = document.createElement(\"script\");\n        const API = 'AIzaSyCEhfBMzJxAaTKLtp8GjcVwEZobHckXXis';\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\n        script.async = true;\n        document.body.appendChild(script);\n      });\n    }\n\n    // Return a promise for the Google Maps API\n    return this.googleMapsPromise;\n  }\n\n  // Method used on each marker upon creation\n  populateInfoWindow = (marker, infoWindow, map) => {\n\n    const {checkedId} = this.props;\n\n    if (infoWindow.marker != marker){\n      console.log(\"Enter populate\", infoWindow.marker);\n\n      infoWindow.marker = marker;\n      infoWindow.setContent(`<div>${marker.title}</div>`);\n      infoWindow.open(map, marker);\n\n      infoWindow.addListener('closeclick', ()=>{\n        infoWindow.marker = null;\n        // this.setState({\n        //   checkedId: \"\"\n        // })\n\n      })\n    }\n\n    console.log(\"pop:\", infoWindow.marker);\n  };\n\n  componentWillMount() {\n    // Start Google Maps API loading since we know we'll soon need it\n    this.getGoogleMaps();\n    // console.log(\"tapas 1\", this.props.tapas);\n  }\n\n  componentDidMount() {\n    // Once the Google Maps API has finished loading, initialize the map\n    // NOTE: Moved content to componentDidUpdate() because props was still empty.\n    // console.log(\"tapas 2\", this.props.tapas);\n    console.log(\"Start ComponentDidMount\");\n\n    this.getGoogleMaps().then((google) => {\n      const center = {lat: 50.121870, lng: 8.689550};\n      const map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 13,\n        center: center,\n        mapTypeControl: false\n      });\n\n      let largeInfoWindow = new google.maps.InfoWindow();\n\n      console.log(\"infowindow:\" , largeInfoWindow)\n\n      return {map:map, window: largeInfoWindow};\n\n    }).then(obj => {\n      this.setState({\n        map: obj.map,\n        infoWindow: obj.window\n      })\n    })\n\n  }\n\n  componentDidUpdate(){\n\n    const {tapas, checkedId} = this.props;\n    const {map, infoWindow} = this.state;\n    let markers;\n    let bounds = new google.maps.LatLngBounds();\n\n\n\n    markers = tapas.map(tapa => {\n      let marker = new google.maps.Marker({\n        map: map,\n        position: {lat: tapa.venue.location.lat, lng: tapa.venue.location.lng},\n        title: tapa.venue.name,\n        // animation: google.maps.Animation.DROP,\n        id: tapa.venue.id\n      });\n      marker.addListener('click', () => {\n        this.populateInfoWindow(marker, infoWindow, map);\n      });\n      bounds.extend(marker.position);\n\n      return marker;\n    });\n\n    console.log(\"ComponentDidUpdate:\", infoWindow.marker);\n    console.log(\"DidUpdate checkedId:\", checkedId);\n\n    if (infoWindow.marker){\n      console.log(\"DidUpdate marker.id:\", infoWindow.marker.id);\n      infoWindow.close();\n    }\n\n    for (let i = 0; i < markers.length; i++){\n      if (markers[i].id === checkedId){\n        console.log(\"markers[i]:\", markers[i])\n\n        infoWindow.marker = markers[i];\n        infoWindow.setContent(`<div>${markers[i].title}</div>`);\n        infoWindow.open(map, markers[i]);\n\n        infoWindow.addListener('closeclick', ()=>{\n          infoWindow.marker = null;\n          // this.setState({\n          //   checkedId: \"\"\n          // })\n\n        })\n      }\n    }\n\n\n\n\n    // Once the Google Maps API has finished loading,\n    // AND props loaded -> initialize the map\n    // this.getGoogleMaps().then((google) => {\n    //\n    //   const center = {lat: 50.121870, lng: 8.689550};\n    //   const map = new google.maps.Map(document.getElementById('map'), {\n    //     zoom: 13,\n    //     center: center,\n    //     mapTypeControl: false\n    //   });\n    //\n    //   let largeInfoWindow = new google.maps.InfoWindow();\n    //   let bounds = new google.maps.LatLngBounds();\n    //\n    //   markers = tapas.map(tapa => {\n    //     let marker = new google.maps.Marker({\n    //       map: map,\n    //       position: {lat: tapa.venue.location.lat, lng: tapa.venue.location.lng},\n    //       title: tapa.venue.name,\n    //       // animation: google.maps.Animation.DROP,\n    //       id: tapa.venue.id\n    //     });\n    //     marker.addListener('click', () => {\n    //       this.populateInfoWindow(marker, largeInfoWindow, map);\n    //     });\n    //     bounds.extend(marker.position);\n    //\n    //     if (marker.id === this.props.checkedId){\n    //       console.log(\"this\", this);\n    //       this.populateInfoWindow(marker, largeInfoWindow, map);\n    //     }\n    //\n    //     return marker;\n    //   });\n    //\n    //   // map.fitBounds(bounds)\n    //   console.log(\"Markers: \", markers);\n    //\n    // });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Filtered Locations</h1>\n        <div id=\"map\" style={{width: 400, height: 300}}></div>\n      </div>\n    )\n  }\n}\n\nexport default MapPromise;"]},"metadata":{},"sourceType":"module"}