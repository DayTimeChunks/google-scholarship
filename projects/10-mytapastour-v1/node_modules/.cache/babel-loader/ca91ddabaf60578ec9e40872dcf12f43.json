{"ast":null,"code":"import escapeRegExp from 'escape-string-regexp';\nimport { secret, id } from './keys'; // Useful documents:\n// https://github.com/foursquare/react-foursquare\n\nvar apiUpToDate = \"20181204\"; // Date I built this app, tells FourSquare to use an api version compatible with this date\n\nvar limitResponses = \"10\"; // Number of responses (I think maximum is 50)\n\nvar apiUrl = \"https://api.foursquare.com/v2\";\nvar apiFeature = \"/venues\";\nexport var getBest = function getBest(loc) {\n  /*\n  Uses the \"explore?\" Foursquare endpoint,\n  which searches only for recommended places.\n  Use the \"search?\" endpoint instead for a wider search.\n   To access the results array, the structure is:\n  array:  myJson.response.groups[0].items\n  * */\n  var api = \"https://api.foursquare.com/v2/venues/explore?\";\n  var food = \"4d4b7105d754a06374d81259\";\n  var myHeaders = new Headers();\n  var myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default'\n  };\n  myHeaders.append(\"Accept-Language\", \"en\");\n  return fetch(\"\".concat(api, \"client_id=\").concat(id, \"&client_secret=\").concat(secret, \"&v=\").concat(apiUpToDate, \"&limit=\").concat(limitResponses, \"&intent=browse&ll=\").concat(loc.lat, \",\").concat(loc.lng, \"&categoryId=\").concat(food), myInit).then(function (res) {\n    return res.json();\n  }).catch(function (err) {\n    console.log(\"getBest error, \", err);\n  });\n};\nexport var getSearch = function getSearch(loc) {\n  /*\n  * Returns a wider search than getBest()\n  *\n  * The response is accessed differently, with venues directly returned as array.\n  *   array:  myJson.venues\n  * */\n  var api = \"https://api.foursquare.com/v2/venues/search?\";\n  var food = \"4d4b7105d754a06374d81259\";\n  var myHeaders = new Headers();\n  var myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default'\n  };\n  myHeaders.append(\"Accept-Language\", \"en\");\n  return fetch(\"\".concat(api, \"client_id=\").concat(id, \"&client_secret=\").concat(secret, \"&v=\").concat(apiUpToDate, \"&limit=\").concat(limitResponses, \"&intent=browse&ll=\").concat(loc.lat, \",\").concat(loc.lng, \"&radius=2000&categoryId=\").concat(food), myInit).then(function (res) {\n    return res.json();\n  }).catch(function (err) {\n    console.log(\"getSearch error, \", err);\n  });\n}; // Additional query, based on 1st result query,\n// which obtained a set of venue IDs\n\nexport var getPhotos = function getPhotos(idArr) {\n  // console.log(\"idArr \", idArr);\n  // Construct an array of \"fetch\" requests\n  var fetchArray = idArr.map(function (idPhoto) {\n    return fetch(\"\".concat(apiUrl).concat(apiFeature, \"/\").concat(idPhoto, \"/photos?client_id=\").concat(id, \"&client_secret=\").concat(secret, \"&v=\").concat(apiUpToDate));\n  }); // console.log(\"fetchArray: \", fetchArray);\n  // Fetch all, and wait for all to resolve,\n  // then return an array of responses converted to json()\n\n  return Promise.all(fetchArray).then(function (respArr) {\n    return respArr.map(function (response) {\n      return response.json();\n    }); // jsonResolvedArr: Array of resolved promises\n  });\n}; // Main query method used, returns a list of venues with information\n\nexport var getQuery = function getQuery(query, loc) {\n  var match = new RegExp(escapeRegExp(query), 'i');\n  var food = \"4d4b7105d754a06374d81259\";\n  var api = \"https://api.foursquare.com/v2/venues/search?client_id=\".concat(id, \"&client_secret=\").concat(secret, \"&v=\").concat(apiUpToDate, \"&limit=\").concat(limitResponses, \"&intent=browse&ll=\").concat(loc.lat, \",\").concat(loc.lng, \"&radius=10000&categoryId=\").concat(food, \"&query=\").concat(match);\n  var myHeaders = new Headers();\n  var myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default'\n  };\n  myHeaders.append(\"Accept-Language\", \"en\");\n  return fetch(api, myInit).then(function (res) {\n    return res.json();\n  }).catch(function (err) {\n    console.log(\"Error on getQuery: \", err);\n  });\n}; // Not used, only for exploring the API.\n// Returns valid Venue categories to be used as filters in the app.\n\nexport var getCategories = function getCategories(loc) {\n  var api = \"https://api.foursquare.com/v2/venues/categories?\";\n  var myHeaders = new Headers();\n  var myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default'\n  };\n  myHeaders.append(\"Accept-Language\", \"en\");\n  return fetch(\"\".concat(api, \"client_id=\").concat(id, \"&client_secret=\").concat(secret, \"&v=\").concat(apiUpToDate, \"&limit=\").concat(limitResponses, \"&intent=browse&ll=\").concat(loc.lat, \",\").concat(loc.lng, \"&radius=10000\"), myInit).then(function (res) {\n    return res.json();\n  }).catch(function (err) {\n    console.log(\"getSearch error, \", err);\n  });\n};","map":{"version":3,"sources":["/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/utils/FoursquareAPI.js"],"names":["escapeRegExp","secret","id","apiUpToDate","limitResponses","apiUrl","apiFeature","getBest","loc","api","food","myHeaders","Headers","myInit","method","headers","mode","cache","append","fetch","lat","lng","then","res","json","catch","err","console","log","getSearch","getPhotos","idArr","fetchArray","map","idPhoto","Promise","all","respArr","response","getQuery","query","match","RegExp","getCategories"],"mappings":"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","sourcesContent":["\nimport escapeRegExp from 'escape-string-regexp'\nimport {secret, id} from './keys'\n\n// Useful documents:\n// https://github.com/foursquare/react-foursquare\n\nconst apiUpToDate = \"20181204\"; // Date I built this app, tells FourSquare to use an api version compatible with this date\nconst limitResponses = \"10\"; // Number of responses (I think maximum is 50)\n\nlet apiUrl = \"https://api.foursquare.com/v2\";\nlet apiFeature = \"/venues\";\n\nexport const getBest = (loc) => {\n  /*\n  Uses the \"explore?\" Foursquare endpoint,\n  which searches only for recommended places.\n  Use the \"search?\" endpoint instead for a wider search.\n\n  To access the results array, the structure is:\n  array:  myJson.response.groups[0].items\n  * */\n\n  const api = \"https://api.foursquare.com/v2/venues/explore?\";\n  const food = \"4d4b7105d754a06374d81259\";\n\n  let myHeaders = new Headers();\n\n  const myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default' };\n\n  myHeaders.append(\"Accept-Language\", \"en\");\n\n  return fetch(`${api}client_id=${id}&client_secret=${secret}&v=${apiUpToDate}&limit=${limitResponses}&intent=browse&ll=${loc.lat},${loc.lng}&categoryId=${food}`, myInit)\n    .then((res) => res.json())\n    .catch( (err) => {\n      console.log(\"getBest error, \", err)\n    });\n};\n\nexport const getSearch = (loc) => {\n\n  /*\n  * Returns a wider search than getBest()\n  *\n  * The response is accessed differently, with venues directly returned as array.\n  *   array:  myJson.venues\n  * */\n\n  const api = \"https://api.foursquare.com/v2/venues/search?\";\n  const food = \"4d4b7105d754a06374d81259\";\n\n  let myHeaders = new Headers();\n\n  const myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default' };\n\n  myHeaders.append(\"Accept-Language\", \"en\");\n\n  return fetch(`${api}client_id=${id}&client_secret=${secret}&v=${apiUpToDate}&limit=${limitResponses}&intent=browse&ll=${loc.lat},${loc.lng}&radius=2000&categoryId=${food}`, myInit)\n    .then((res) => res.json())\n    .catch( (err) => {\n      console.log(\"getSearch error, \", err)\n    });\n};\n\n\n// Additional query, based on 1st result query,\n// which obtained a set of venue IDs\nexport const getPhotos = (idArr) => {\n  // console.log(\"idArr \", idArr);\n  // Construct an array of \"fetch\" requests\n  let fetchArray = idArr.map( idPhoto =>\n    (fetch(`${apiUrl}${apiFeature}/${idPhoto}/photos?client_id=${id}&client_secret=${secret}&v=${apiUpToDate}`)));\n  // console.log(\"fetchArray: \", fetchArray);\n\n  // Fetch all, and wait for all to resolve,\n  // then return an array of responses converted to json()\n  return Promise.all(fetchArray)\n    .then( respArr => {\n      return respArr.map( response => response.json());\n      // jsonResolvedArr: Array of resolved promises\n  });\n};\n\n// Main query method used, returns a list of venues with information\nexport const getQuery = (query, loc) => {\n  const match = new RegExp(escapeRegExp(query), 'i');\n  const food = \"4d4b7105d754a06374d81259\";\n  const api = `https://api.foursquare.com/v2/venues/search?client_id=${id}&client_secret=${secret}&v=${apiUpToDate}&limit=${limitResponses}&intent=browse&ll=${loc.lat},${loc.lng}&radius=10000&categoryId=${food}&query=${match}`;\n\n  let myHeaders = new Headers();\n\n  const myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default' };\n\n  myHeaders.append(\"Accept-Language\", \"en\");\n\n  return fetch(api, myInit)\n    .then((res) => res.json())\n    .catch((err) => {\n      console.log(\"Error on getQuery: \", err)\n    });\n};\n\n// Not used, only for exploring the API.\n// Returns valid Venue categories to be used as filters in the app.\nexport const getCategories = (loc) => {\n  const api = \"https://api.foursquare.com/v2/venues/categories?\";\n\n  let myHeaders = new Headers();\n\n  const myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default' };\n\n  myHeaders.append(\"Accept-Language\", \"en\");\n\n  return fetch(`${api}client_id=${id}&client_secret=${secret}&v=${apiUpToDate}&limit=${limitResponses}&intent=browse&ll=${loc.lat},${loc.lng}&radius=10000`, myInit)\n    .then((res) => res.json())\n    .catch( (err) => {\n      console.log(\"getSearch error, \", err)\n    });\n}\n\n\n"]},"metadata":{},"sourceType":"module"}