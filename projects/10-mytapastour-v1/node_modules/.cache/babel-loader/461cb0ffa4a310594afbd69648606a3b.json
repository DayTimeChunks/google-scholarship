{"ast":null,"code":"import _classCallCheck from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport SearchField from './SearchField';\nimport MapField from './MapField';\nimport TapasList from './TapasList';\nimport * as FoursquareAPI from './utils/FoursquareAPI'; // import {hardTapas} from \"./utils/FoursquareAPI\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.addPhotos = function () {\n      var idArray;\n      var temp_photos = []; // If explored responses loaded from API,\n      // search the API again for the venue photos\n      // Not most efficient, but the explore-API returns no images in json obj.\n\n      if (_this.state.tapas) {\n        idArray = _this.state.tapas.map(function (tapa) {\n          return tapa.venue.id;\n        });\n\n        _this.setState({\n          photos_ids: idArray\n        });\n\n        FoursquareAPI.getPhotos(idArray).then(function (jsonResolvedArr) {\n          // Create array of resolved promises' responses array\n          jsonResolvedArr.map(function (promise) {\n            return promise.then(function (res) {\n              temp_photos.push(res.response.photos.items);\n            });\n          });\n        }) // Refresh state only after all photos addresses have been loaded\n        .then(function () {\n          return _this.setState({\n            photos: temp_photos\n          });\n        });\n      }\n    };\n\n    _this.updateResults = function (foundTapas) {\n      _this.setState({\n        tapas: foundTapas\n      });\n    };\n\n    _this.state = {\n      query: \"\",\n      tapas: [],\n      //hardTapas,\n      location: {\n        lat: 50.121870,\n        lng: 8.689550\n      },\n      photos_ids: [],\n      photos: []\n    };\n    return _this;\n  } // Lifecycle event, fetches restaurants from FourSquare API\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      FoursquareAPI.getTapas(this.state.location).then(function (myJson) {\n        // console.log(\"Response:\", myJson.response );\n        _this2.setState({\n          tapas: myJson.response.groups[0].items\n        }, function () {\n          _this2.addPhotos();\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-12 col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(SearchField, {\n        tapas: this.state.tapas,\n        location: this.state.location,\n        update: this.updateResults,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(TapasList, {\n        tapas: this.state.tapas,\n        photos_ids: this.state.photos_ids,\n        photos: this.state.photos,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"map-container col-12 col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(MapField, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\n/*\n* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n* */","map":{"version":3,"sources":["/Users/DayTightChunks/Documents/eCourses/WebDev/FE-Nanodegree/React-apps/mytapas-v1/src/App.js"],"names":["React","Component","SearchField","MapField","TapasList","FoursquareAPI","App","props","addPhotos","idArray","temp_photos","state","tapas","map","tapa","venue","id","setState","photos_ids","getPhotos","then","jsonResolvedArr","promise","res","push","response","photos","items","updateResults","foundTapas","query","location","lat","lng","getTapas","myJson","groups","catch","err","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SearchField from './SearchField'\nimport MapField from './MapField'\nimport TapasList from './TapasList'\nimport * as FoursquareAPI from './utils/FoursquareAPI'\n// import {hardTapas} from \"./utils/FoursquareAPI\";\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: \"\",\n      tapas: [], //hardTapas,\n      location: {\n        lat: 50.121870,\n        lng: 8.689550\n      },\n      photos_ids: [],\n      photos: []\n    }\n  }\n\n  // Lifecycle event, fetches restaurants from FourSquare API\n  componentDidMount(){\n    FoursquareAPI.getTapas(this.state.location)\n      .then( myJson => {\n        // console.log(\"Response:\", myJson.response );\n        this.setState({tapas: myJson.response.groups[0].items},\n          () => {this.addPhotos()});\n    }).catch( err => { console.log(err)} )\n  }\n\n  addPhotos = () => {\n    let idArray;\n    let temp_photos = [];\n\n    // If explored responses loaded from API,\n    // search the API again for the venue photos\n    // Not most efficient, but the explore-API returns no images in json obj.\n    if (this.state.tapas){\n      idArray  = this.state.tapas.map( tapa => tapa.venue.id);\n\n      this.setState({photos_ids: idArray});\n\n      FoursquareAPI.getPhotos(idArray)\n        .then( jsonResolvedArr => {\n          // Create array of resolved promises' responses array\n          jsonResolvedArr.map( promise => (\n            promise.then( res => {\n              temp_photos.push(res.response.photos.items)\n            })));\n        }) // Refresh state only after all photos addresses have been loaded\n        .then( () => this.setState({photos: temp_photos}))\n    }\n  };\n\n  updateResults = (foundTapas) => {\n    this.setState({tapas: foundTapas})\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-12 col-md-6\">\n            <SearchField\n              tapas={this.state.tapas}\n              location={this.state.location}\n              update={this.updateResults}/>\n            <TapasList\n              tapas={this.state.tapas}\n              photos_ids={this.state.photos_ids}\n              photos={this.state.photos}\n            />\n          </div>\n          <div className=\"map-container col-12 col-md-6\">\n            <MapField/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n/*\n* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n* */"]},"metadata":{},"sourceType":"module"}